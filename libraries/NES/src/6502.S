#include "macro.h"

globalptr	.req r10 @//=wram_globals* ptr 6502�Ļ�׼ָ��
@----------------------------------------------------------------------------

start_map 0,globalptr 

_m_ opz,4
_m_ readmem_tbl,8*4
_m_ writemem_tbl,8*4
_m_ memmap_tbl,8*4
_m_ cpuregs,7*4
_m_ m6502_s,4
_m_ lastbank,4
_m_ nexttimeout,4

_m_ rombase,4
_m_ romnumber,4   @ADDED
_m_ rommask,4     @ADDED

_m_ joy0data,4
_m_ joy1data,4

_m_ clocksh,4
_m_ cpunmif,4
_m_ cpuirqf,4
@***********************************************************************************************
C = 0x01	@//6502 flags  6502��־
Z = 0x02
I = 0x04
D = 0x08
B = 0x10	@//(allways 1 except when IRQ pushes it)IRQ�ⲿ�ж�
R = 0x20	@//(locked at 1)
V = 0x40
N = 0x80

.macro encodePC		@translate from 6502 PC to rom offset
	and r1,m6502_pc,#0xE000
	adr_ r2,memmap_tbl
	ldr r0,[r2,r1,lsr#11]
	str_ r0,lastbank
	add m6502_pc,m6502_pc,r0
.endm

.macro encodeP extra	@pack 6502 flags into r0
	and r0,cycles,#CYC_V+CYC_D+CYC_I+CYC_C
	tst m6502_nz,#0x80000000@//PSR_N
	orrne r0,r0,#N				@N
	tst m6502_nz,#0xff
	orreq r0,r0,#Z				@Z
	orr r0,r0,#\extra			@R(&B)
.endm

.macro decodeP	@unpack 6502 flags from r0
	bic cycles,cycles,#CYC_V+CYC_D+CYC_I+CYC_C
	and r1,r0,#V+D+I+C
	orr cycles,cycles,r1		@VDIC
	bic m6502_nz,r0,#0xFD			@r0 is signed
	eor m6502_nz,m6502_nz,#Z
.endm

.macro fetch count
	ldr_ r0,clocksh			   @//����apu��Ҫ��ʱ����
	add r0,r0,#\count
	str_ r0,clocksh

	ldr_ r1,opz            @//��ȡ������ת����ַ
	@//-------------------------------------------------------------------------
	subs cycles,cycles,#\count*256 @//CYCLE=256 @//	3*256 ������0��ִ����2��ָ��  
	ldrplb r0,[m6502_pc],#1			   @ //�Ӵ洢���м����ֽڵ�һ���Ĵ�����	 r0=������
	@	ldrpl pc,[m6502_optbl,r0,lsl#2]	  @//r10 ********r0=r0x4***���д���ĵ�ַ**************************************
	ldrpl pc,[r1,r0,lsl#2]
	ldr_ pc,nexttimeout
.endm

.macro fetch_c count	@same as fetch except it adds the Carry (bit 0) also.
						@This is unsafe By huiminghao.
	ldr_ r0,clocksh			   @//����apu��Ҫ��ʱ����
	add r0,r0,#\count
	str_ r0,clocksh

	ldr_ r1,opz            @//��ȡ������ת����ַ
	@//-------------------------------------------------------------------------
	sbcs cycles,cycles,#\count*256 @//CYCLE=256 @//	3*256 ������0��ִ����2��ָ��  
	ldrplb r0,[m6502_pc],#1			   @ //�Ӵ洢���м����ֽڵ�һ���Ĵ�����	 r0=������
	@	ldrpl pc,[m6502_optbl,r0,lsl#2]	  @//r10 ********r0=r0x4***���д���ĵ�ַ**************************************
	ldrpl pc,[r1,r0,lsl#2]
	ldr_ pc,nexttimeout
.endm

.macro clearcycles
	and cycles,cycles,#CYC_MASK		@Save CPU bits
.endm

.macro readmemabs
	and r1,addy,#0xE000
	adr lr,0f
	@ ldr pc,[m6502_rmem,r1,lsr#11]	@in: addy,r1=addy&0xE000 (for rom_R)
	lsr r1,r1,#11				 ;//�Ĺ�����2��	 >>11
	ldr pc,[m6502_rmem,r1]
0:				@out: r0=val (bits 8-31=0 (LSR,ROR,INC,DEC,ASL)), addy preserved for RMW instructions
.endm

.macro readmemzp
	ldrb r0,[cpu_zpage,addy]
	@ lsr r0,addy,#24				  ;//�Ĺ�����3��
	@ ldrb r0,[cpu_zpage,r0]
.endm

.macro readmemzpi
	@ ldrb r0,[cpu_zpage,addy,lsr#24]
	lsr r0,addy,#24				  ;//�Ĺ�����3��
	ldrb r0,[cpu_zpage,r0]
.endm

.macro readmemzps
	ldrsb m6502_nz,[cpu_zpage,addy]
.endm

.macro readmemimm
	ldrb r0,[m6502_pc],#1
.endm

.macro readmemimms
	ldrsb m6502_nz,[m6502_pc],#1
.endm

.macro readmem
	.if _type == _ABS
		readmemabs
	.endif
	.if _type == _ZP
		readmemzp
	.endif
	.if _type == _ZPI
		readmemzpi
	.endif
	.if _type == _IMM
		readmemimm
	.endif
.endm

.macro readmems
	.if _type == _ABS
		readmemabs
		orr m6502_nz,r0,r0,lsl#24
	.endif
	.if _type == _ZP
		readmemzps
	.endif
	.if _type == _IMM
		readmemimms
	.endif
.endm


.macro writememabs
	and r1,addy,#0xe000
	adr_ r2,writemem_tbl
	adr lr,0f
	@ ldr pc,[r2,r1,lsr#11]	@in: addy,r0=val(bits 8-31=?)
	lsr r1,r1,#11				 ;//�Ĺ�����2�� >>11
	ldr pc,[r2,r1]
0:				@out: r0,r1,r2,addy=?
.endm

.macro writememzp
	strb r0,[cpu_zpage,addy]
.endm

.macro writememzpi
	@ strb r0,[cpu_zpage,addy,lsr#24]
	lsr r1,addy,#24				 ;//�Ĺ�����2��	 >>24
	strb r0,[cpu_zpage,r1]
.endm

.macro writemem
	.if _type == _ABS
		writememabs
	.endif
	.if _type == _ZP
		writememzp
	.endif
	.if _type == _ZPI
		writememzpi
	.endif
.endm
@----------------------------------------------------------------------------

.macro push16		@push r0
	mov r1,r0,lsr#8
	ldr_ r2,m6502_s
	strb r1,[r2],#-1
	orr r2,r2,#0x100
	strb r0,[r2],#-1
	strb_ r2,m6502_s
.endm		@r1,r2=?

.macro push8 x
	ldr_ r2,m6502_s
	strb \x,[r2],#-1
	strb_ r2,m6502_s
.endm		@r2=?

.macro pop16		@pop m6502_pc
	ldrb_ r2,m6502_s
	add r2,r2,#2
	strb_ r2,m6502_s
	ldr_ r2,m6502_s
	ldrb r0,[r2],#-1
	orr r2,r2,#0x100
	ldrb m6502_pc,[r2]
	orr m6502_pc,m6502_pc,r0,lsl#8
.endm		@r0,r1=?

.macro pop8 x
	ldrb_ r2,m6502_s
	add r2,r2,#1
	strb_ r2,m6502_s
	orr r2,r2,#0x100
	ldrsb \x,[cpu_zpage,r2]		@signed for PLA & PLP
.endm	@r2=?

@----------------------------------------------------------------------------
@doXXX: load addy, increment m6502_pc

	@ GBLA _type

_IMM	= 1						@immediate
_ZP		= 2						@zero page
_ZPI	= 3						@zero page indexed
_ABS	= 4						@absolute

	.macro doABS                           @absolute               $nnnn
_type	=      _ABS
	ldrb addy,[m6502_pc],#1
	ldrb r0,[m6502_pc],#1
	orr addy,addy,r0,lsl#8
	.endm

	.macro doAIX                           @absolute indexed X     $nnnn,X
_type	=      _ABS
	ldrb addy,[m6502_pc],#1
	ldrb r0,[m6502_pc],#1
	orr addy,addy,r0,lsl#8
	add addy,addy,m6502_x,lsr#24
@	bic addy,addy,#0xff0000 @Base Wars needs this
	.endm

	.macro doAIY                           @absolute indexed Y     $nnnn,Y
_type	=      _ABS
	ldrb addy,[m6502_pc],#1
	ldrb r0,[m6502_pc],#1
	orr addy,addy,r0,lsl#8
	add addy,addy,m6502_y,lsr#24
@	bic addy,addy,#0xff0000 @Tecmo Bowl needs this
	.endm

	.macro doIMM                           @immediate              #$nn
_type	=      _IMM
	.endm

	.macro doIIX                           @indexed indirect X     ($nn,X)
_type	=      _ABS
	ldrb r0,[m6502_pc],#1
	add r0,m6502_x,r0,lsl#24
	@//ldrb addy,[cpu_zpage,r0,lsr#24]	@//����:ָ����ת�䲻����
    lsr addy,r0,#24			  @//�Ĺ�����2�� >>24
	ldrb addy,[cpu_zpage,addy]

	add r0,r0,#0x01000000
	@//ldrb r1,[cpu_zpage,r0,lsr#24]	@//R1,LSR#2@��R1�е���������2λ
	lsr r1,r0,#24			  @//�Ĺ�����2��
	ldrb r1,[cpu_zpage,r1]

	orr addy,addy,r1,lsl#8
	.endm

	.macro doIIY                           @indirect indexed Y     ($nn),Y
_type	=      _ABS
	ldrb r0,[m6502_pc],#1
@//	ldrb addy,[r0,cpu_zpage]! @@�����ݴ���֮ǰ,��ƫ�����ӵ�.req ��,������Ϊ�������ݵĴ洢��ַ
                            @//��ʹ�ú�׺"!",����д�ص�.req��
	ldrb addy,[r0,cpu_zpage]
	add r0,r0,cpu_zpage			@//////////////////////////////////////


	ldrb r1,[r0,#1]
	orr addy,addy,r1,lsl#8
	add addy,addy,m6502_y,lsr#24
@	bic addy,addy,#0xff0000 @Zelda2 needs this
	.endm

	.macro doZPI							@Zeropage indirect     ($nn)
_type	=      _ABS
	ldrb r0,[m6502_pc],#1
@//	ldrb addy,[r0,cpu_zpage]!@@�����ݴ���֮ǰ,��ƫ�����ӵ�.req ��,������Ϊ�������ݵĴ洢��ַ
                            @//��ʹ�ú�׺"!",����д�ص�.req��
	ldrb addy,[r0,cpu_zpage]
	add r0,r0,cpu_zpage	
	
	
	ldrb r1,[r0,#1]
	orr addy,addy,r1,lsl#8
	.endm

	.macro doZ                             @zero page              $nn
_type	=      _ZP
	ldrb addy,[m6502_pc],#1
	.endm

	.macro doZ2							@zero page              $nn
_type	=      _ZP
	ldrb addy,[m6502_pc],#2			@ugly thing for bbr/bbs
	.endm

	.macro doZIX                           @zero page indexed X    $nn,X
_type	=      _ZP
	ldrb addy,[m6502_pc],#1
	add addy,addy,m6502_x,lsr#24
	and addy,addy,#0xff @Rygar needs this
	.endm

	.macro doZIXf							@zero page indexed X    $nn,X
_type	=      _ZPI
	ldrb addy,[m6502_pc],#1
	add addy,m6502_x,addy,lsl#24
	.endm

	.macro doZIY                           @zero page indexed Y    $nn,Y
_type	=      _ZP
	ldrb addy,[m6502_pc],#1
	add addy,addy,m6502_y,lsr#24
	and addy,addy,#0xff
	.endm

	.macro doZIYf							@zero page indexed Y    $nn,Y
_type	=      _ZPI
	ldrb addy,[m6502_pc],#1
	add addy,m6502_y,addy,lsl#24
	.endm

@----------------------------------------------------------------------------

	.macro opADC
	readmem
	movs r1,cycles,lsr#1		@get C
	subcs r0,r0,#0x00000100
	adcs m6502_a,m6502_a,r0,ror#8
	mov m6502_nz,m6502_a,asr#24		@NZ
	orr cycles,cycles,#CYC_C+CYC_V	@Prepare C & V
	bicvc cycles,cycles,#CYC_V	@V
	.endm

	.macro opAND
	readmem
	and m6502_a,m6502_a,r0,lsl#24
	mov m6502_nz,m6502_a,asr#24		@NZ
	.endm

	.macro opASL
	readmem
	add r0,r0,r0
	orrs m6502_nz,r0,r0,lsl#24		@NZ
	orr cycles,cycles,#CYC_C		@Prepare C
	writemem
	.endm

	.macro opBIT
	readmem
	bic cycles,cycles,#CYC_V		@reset V
	tst r0,#V
	orrne cycles,cycles,#CYC_V		@V
	and m6502_nz,r0,m6502_a,lsr#24	@Z
	orr m6502_nz,m6502_nz,r0,lsl#24	@N
	.endm

	.macro opCOMP x			@A,X & Y
	readmem
	subs m6502_nz,\x,r0,lsl#24
	mov m6502_nz,m6502_nz,asr#24	@NZ
	orr cycles,cycles,#CYC_C	@Prepare C
	.endm

	.macro opDEC
	readmem
	sub r0,r0,#1
	orr m6502_nz,r0,r0,lsl#24		@NZ
	writemem
	.endm

	.macro opEOR
	readmem
	eor m6502_a,m6502_a,r0,lsl#24
	mov m6502_nz,m6502_a,asr#24		@NZ
	.endm

	.macro opINC
	readmem
	add r0,r0,#1
	orr m6502_nz,r0,r0,lsl#24		@NZ
	writemem
	.endm

	.macro opLOAD x
	readmems
	@ mov \x,m6502_nz,lsl#24 //thinpv
	mov \x,m6502_nz,lsl#24
	.endm

	.macro opLSR
	.if _type == _ABS
		readmemabs
		movs r0,r0,lsr#1
		orr cycles,cycles,#CYC_C	@Prepare C
		mov m6502_nz,r0				@Z, (N=0)
		writememabs
	.endif
	.if _type == _ZP
		ldrb m6502_nz,[cpu_zpage,addy]
		movs m6502_nz,m6502_nz,lsr#1	@Z, (N=0)
		orr cycles,cycles,#CYC_C	@Prepare C
		strb m6502_nz,[cpu_zpage,addy]
	.endif
	.if _type == _ZPI
@//		ldrb m6502_nz,[cpu_zpage,addy,lsr#24]
		lsr m6502_nz,addy,#24				  @//�Ĺ�����2��
		ldrb m6502_nz,[cpu_zpage,m6502_nz]

		movs m6502_nz,m6502_nz,lsr#1	@Z, (N=0)
		orr cycles,cycles,#CYC_C	@Prepare C
@//		strb m6502_nz,[cpu_zpage,addy,lsr#24]
		lsr r1,addy,#24				   @//�Ĺ�����2��
		strb m6502_nz,[cpu_zpage,r1]
	.endif
	.endm

	.macro opORA
	readmem
	orr m6502_a,m6502_a,r0,lsl#24
	mov m6502_nz,m6502_a,asr#24
	.endm

	.macro opROL
	readmem
	 movs cycles,cycles,lsr#1		@get C
	 adc r0,r0,r0
	 orrs m6502_nz,r0,r0,lsl#24		@NZ
	 adc cycles,cycles,cycles		@Set C
	writemem
	.endm

	.macro opROR
	readmem
	 movs cycles,cycles,lsr#1		@get C
	 orrcs r0,r0,#0x100
	 movs r0,r0,lsr#1
	 orr m6502_nz,r0,r0,lsl#24		@NZ
	 adc cycles,cycles,cycles		@Set C
	writemem
	.endm

	.macro opSBC
	readmem
	movs r1,cycles,lsr#1			@get C
	sbcs m6502_a,m6502_a,r0,lsl#24
	and m6502_a,m6502_a,#0xff000000
	mov m6502_nz,m6502_a,asr#24 		@NZ
	orr cycles,cycles,#CYC_C+CYC_V	@Prepare C & V
	bicvc cycles,cycles,#CYC_V		@V
	.endm

	.macro opSTORE x
	mov r0,\x,lsr#24
	writemem
	.endm
@*************************************************************************************************

	.global NES_RAM		 @nes_main.c   __align(1024) uint8 NES_RAM[0x800]@//����1024�ֽڶ���
	.global NES_SRAM		 @nes_main.c   uint8 NES_SRAM[0x2000]@	
	.global spr_ram		 @             uint8 spr_ram[0x100]@
	.global romfile @from main.c	

	.global cpunmi    @cpu�жϱ�־
	.global cpuirq    @cpu�жϱ�־ 
	.global clocks    @apuҪ��cpuʱ��
	.global cpu_data	   @��ַ cart.s
	.global rommap
	.global NMI6502
	.global CPU_reset
	.global run6502
		
	.global cpu6502_init
	.global map67_	
	.global map67_0	
	.global map89_
	.global mapAB_
	.global mapCD_
	.global mapEF_	
	.global map89ABCDEF_

IRQ_VECTOR		= 0xfffe @ //IRQ / BRK�ж�������ַ
RES_VECTOR		= 0xfffc @// ��λ�ж�������ַ
NMI_VECTOR		= 0xfffa @// NMI�ж�������ַ

@cycle flags- (stored in cycles reg for speed)�洢���������ٶ�

CYC_C			= 0x01	@Carry bit ��λ
@BRANCH			= 0x02	@branch instruction encountered	������ָ֧��
CYC_I			= 0x04	@IRQ mask
CYC_D			= 0x08	@Decimal bit	С��λ
CYC_V			= 0x40	@Overflow bit	 ���λ
@CYC_MASK		= 0xFF@CYCLE-1	@Mask

@    AREA cpu_code, CODE, READONLY @, ALIGN=2
@ 											@	��Ҫ�� ARM �����ʹ�� ALIGN=0 �� ALIGN=1��
@                                            @    ��Ҫ�� Thumb �����ʹ�� ALIGN=0��
@    @AREA  α����Ҳ����Ҫ�﷨�ģ�AREA  ������Ŷ�����ţ�Ȼ�������ԣ�CODE ��ʾ����һ 
@ 	@������Σ�READONLY ��ʾ�������ֻ����
@ 	@|.text|ϵͳĬ�ϵĴ������  
@ 	@ ALIGN ָ��ͨ������� NOP ָ�������佫��ǰλ�ö��뵽ָ���߽�
@ 	@ENTRY  ���α����������������ڵ�
@ @	THUMB	 @Thumb��ARM��ϵ�ṹ��һ��16λ��ָ�
@ @	R=IRE8  @R=IRE8 ָ��ָ����ǰ�ļ�Ҫ���ջ���ֽڶ��롣 ������ REQ8 ����������֪ͨ��������
@ 	PRESERVE8 @{TRUE} @PRESERVE8 ָ��ָ����ǰ�ļ����ֶ�ջ���ֽڶ��롣 ������ PRES8 ����������֪ͨ��������
@ 			  @�����ʡ�� PRESERVE8 �� PRESERVE8 {FALSE}������������޸� sp ��ָ�
@ 			  @�Ծ����Ƿ����� PRES8 �������ԡ� ARM ������ȷָ�� PRESERVE8��
@ 			  @ ARMʹ��r0��Ϊ����ֵ
@ 			  @��������ARM���Ĵ�������ջ�����Ƚ���������r0, r1��

@  @  PROC Ϊ�ӳ���ʼ��ENDP Ϊ�ӳ������
.section cpu_code, "ax"

		@r0,r1,r2=temp regs	  
m6502_nz	.req r3 @bit 31=N, Z=1 if bits 0-7=0		  @.req����Ĵ�����
m6502_rmem	.req r4 @readmem_tbl
m6502_a		.req r5 @//bits 0-23=0, ������������ڴ��е��ֽ�
m6502_x		.req r6 @bits 0-23=0
m6502_y		.req r7 @bits 0-23=0
cycles		.req r8 @//also VDIC flagsҲVDIC��־
m6502_pc	.req r9
globalptr	.req r10 @=wram_globals* ptr
m6502_optbl	.req r10
cpu_zpage	.req r11 @=CPU_RAM
addy		.req r12 @//keep this at r12 (��ͷ APCS)	//addr  :����8λ��ַ 
		@r13=SP
		@r14=LR
		@r15=PC
@---------------------------------------------------
	

_00:@   BRK
@----------------------------------------------------------------------------

	ldr_ r0,lastbank		 @	  6502PC�� ROM�����ƫ���� //thinpv
	sub r1,m6502_pc,r0
	add r0,r1,#1
	push16			@save PC

	encodeP (B+R)		@save P

	ldr r12,=IRQ_VECTOR
	bl VecCont

	fetch 7
	@ LTORG			 @ָ� LTORG��������һ����ִ�е�λ��
	.ltorg
@----------------------------------------------------------------------------
_01:@   ORA ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opORA
	fetch 6
@---------------------------------------------------------------------------------
_05:@   ORA $nn
@---------------------------------------------------------------------------------
	doZ
	opORA
	fetch 3
@---------------------------------------------------------------------------------
_06:@   ASL $nn
@---------------------------------------------------------------------------------
	doZ
	opASL
	fetch_c 5
	@ fetch 5
@---------------------------------------------------------------------------------
_08:@   PHP
@---------------------------------------------------------------------------------
	encodeP (B+R)
	push8 r0
	fetch 3
@---------------------------------------------------------------------------------
_09:@   ORA #$nn
@---------------------------------------------------------------------------------
	doIMM
	opORA
	fetch 2
@---------------------------------------------------------------------------------
_0A:@   ASL
@---------------------------------------------------------------------------------
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		@NZ
	orr cycles,cycles,#CYC_C		@Prepare C
	fetch_c 2						@also subs carry
@---------------------------------------------------------------------------------
_0D:@   ORA $nnnn
@---------------------------------------------------------------------------------
	doABS
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_0E:@   ASL $nnnn
@---------------------------------------------------------------------------------
	doABS
	opASL
	fetch_c 6
	@ fetch 6
@---------------------------------------------------------------------------------
_10:@   BPL *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	@	subeq cycles,cycles,#3*CYCLE
	subeq cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_11:@   ORA ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opORA
	fetch 5
@---------------------------------------------------------------------------------
_15:@   ORA $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_16:@   ASL $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opASL
	fetch_c 6
	@ fetch 6
@---------------------------------------------------------------------------------
_18:@   CLC
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_C
	fetch 2
@---------------------------------------------------------------------------------
_19:@   ORA $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_1D:@   ORA $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_1E:@   ASL $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opASL
	fetch_c 7
	@ fetch 7
@---------------------------------------------------------------------------------
_20:@   JSR $nnnn
@---------------------------------------------------------------------------------
	ldrb r2,[m6502_pc],#1
	ldr_ r1,lastbank
	sub r0,m6502_pc,r1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r2,r1,lsl#8
	push16
	encodePC
	fetch 6
@---------------------------------------------------------------------------------
_21:@   AND ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opAND
	fetch 6
@---------------------------------------------------------------------------------
_24:@   BIT $nn
@---------------------------------------------------------------------------------
	doZ
	opBIT
	fetch 3
@---------------------------------------------------------------------------------
_25:@   AND $nn
@---------------------------------------------------------------------------------
	doZ
	opAND
	fetch 3
@---------------------------------------------------------------------------------
_26:@   ROL $nn
@---------------------------------------------------------------------------------
	doZ
	opROL
	fetch 5
@---------------------------------------------------------------------------------
_28:@   PLP
@---------------------------------------------------------------------------------
	pop8 r0
	decodeP
	fetch 4
@---------------------------------------------------------------------------------
_29:@   AND #$nn
@---------------------------------------------------------------------------------
	doIMM
	opAND
	fetch 2
@---------------------------------------------------------------------------------
_2A:@   ROL
@---------------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		@get C
	orrcs m6502_a,m6502_a,#0x00800000
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		@NZ
	adc cycles,cycles,cycles		@Set C
	fetch 2
@---------------------------------------------------------------------------------
_2C:@   BIT $nnnn
@---------------------------------------------------------------------------------
	doABS
	opBIT
	fetch 4
@---------------------------------------------------------------------------------
_2D:@   AND $nnnn
@---------------------------------------------------------------------------------
	doABS
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_2E:@   ROL $nnnn
@---------------------------------------------------------------------------------
	doABS
	opROL
	fetch 6
@---------------------------------------------------------------------------------
_30:@   BMI *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	@	subne cycles,cycles,#3*CYCLE
	subne cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_31:@   AND ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opAND
	fetch 5
@---------------------------------------------------------------------------------
_35:@   AND $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_36:@   ROL $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opROL
	fetch 6
@---------------------------------------------------------------------------------
_38:@   SEC
@---------------------------------------------------------------------------------
	orr cycles,cycles,#CYC_C
	fetch 2
@---------------------------------------------------------------------------------
_39:@   AND $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_3D:@   AND $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_3E:@   ROL $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opROL
	fetch 7
@---------------------------------------------------------------------------------
_40:@   RTI
@---------------------------------------------------------------------------------
	pop8 r0		@pop 6502 flags and decode
	decodeP
	pop16		@pop the return address
	encodePC
@	sub cycles,cycles,#6*3*CYCLE	@not implemented yet in PocketNES.
@	b checkirqdisable				@Fixes ???
	fetch 6
@---------------------------------------------------------------------------------
_41:@   EOR ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opEOR
	fetch 6
@---------------------------------------------------------------------------------
_45:@   EOR $nn
@---------------------------------------------------------------------------------
	doZ
	opEOR
	fetch 3
@---------------------------------------------------------------------------------
_46:@   LSR $nn
@---------------------------------------------------------------------------------
	doZ
	opLSR
	@ fetch 5
	fetch_c 5
@---------------------------------------------------------------------------------
_48:@   PHA
@---------------------------------------------------------------------------------
	mov r0,m6502_a,lsr#24
	push8 r0
	fetch 3
@---------------------------------------------------------------------------------
_49:@   EOR #$nn
@---------------------------------------------------------------------------------
	doIMM
	opEOR
	fetch 2
@---------------------------------------------------------------------------------
_4A:@   LSR
@---------------------------------------------------------------------------------
	movs m6502_nz,m6502_a,lsr#25	@Z, N=0
	mov m6502_a,m6502_nz,lsl#24		@result without garbage
	orr cycles,cycles,#CYC_C		@Prepare C
	fetch_c 2
@---------------------------------------------------------------------------------
_4C:@   JMP $nnnn
@---------------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
	encodePC
	fetch 3
@---------------------------------------------------------------------------------
_4D:@   EOR $nnnn
@---------------------------------------------------------------------------------
	doABS
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_4E:@   LSR $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLSR
	@ fetch 6
	fetch_c 6
@---------------------------------------------------------------------------------
_50:@   BVC *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_V
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	@	subeq cycles,cycles,#3*CYCLE
	subeq cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_51:@   EOR ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opEOR
	fetch 5
@---------------------------------------------------------------------------------
_55:@   EOR $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_56:@   LSR $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opLSR
	@ fetch 6
	fetch_c 6
@---------------------------------------------------------------------------------
_58:@   CLI
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I
@	sub cycles,cycles,#2*3*CYCLE	@not implemented yet on PocketNES
@	b checkirqs						@Fixes ???
	fetch 2
@---------------------------------------------------------------------------------
_59:@   EOR $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_5D:@   EOR $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_5E:@   LSR $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opLSR
	@ fetch 7
	fetch_c 7
@---------------------------------------------------------------------------------
_60:@   RTS
@---------------------------------------------------------------------------------
	pop16
	add m6502_pc,m6502_pc,#1
	encodePC
	fetch 6
@---------------------------------------------------------------------------------
_61:@   ADC ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opADC
	fetch_c 6
@---------------------------------------------------------------------------------
_65:@   ADC $nn
@---------------------------------------------------------------------------------
	doZ
	opADC
	fetch_c 3
@---------------------------------------------------------------------------------
_66:@   ROR $nn
@---------------------------------------------------------------------------------
	doZ
	opROR
	fetch 5
@---------------------------------------------------------------------------------
_68:@   PLA
@---------------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_a,m6502_nz,lsl#24
	fetch 4
@---------------------------------------------------------------------------------
_69:@   ADC #$nn
@---------------------------------------------------------------------------------
	doIMM
	opADC
	fetch_c 2
@---------------------------------------------------------------------------------
_6A:@   ROR
@---------------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		@get C
	mov m6502_a,m6502_a,rrx
	movs m6502_nz,m6502_a,asr#24	@NZ
	and m6502_a,m6502_a,#0xff000000
	adc cycles,cycles,cycles		@Set C
	fetch 2
@---------------------------------------------------------------------------------
_6C:@   JMP ($nnnn)
@---------------------------------------------------------------------------------
	doABS
	adr_ r1,memmap_tbl
	and r2,addy,#0xE000
	@ ldr r1,[r1,r2,lsr#11]
	lsr r0,r2,#11			  
	ldr r1,[r1,r0]		   @;�����ݴ���֮ǰ,��ƫ�����ӵ�Rn ��,������Ϊ�������ݵĴ洢��ַ

	ldrb m6502_pc,[r1,addy]
	add r1,r1,addy

	ldrb r0,[r1,#1]
	orr m6502_pc,m6502_pc,r0,lsl#8
	encodePC
	fetch 5
@---------------------------------------------------------------------------------
_6D:@   ADC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_6E:@   ROR $nnnn
@---------------------------------------------------------------------------------
	doABS
	opROR
	fetch 6
@---------------------------------------------------------------------------------
_70:@   BVS *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_V
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	@	subne cycles,cycles,#3*CYCLE
	subne cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_71:@   ADC ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opADC
	fetch_c 5
	@ fetch_c 4
@---------------------------------------------------------------------------------
_75:@   ADC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_76:@   ROR $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opROR
	fetch 6
@---------------------------------------------------------------------------------
_78:@   SEI
@---------------------------------------------------------------------------------
	orr cycles,cycles,#CYC_I
	fetch 2
@---------------------------------------------------------------------------------
_79:@   ADC $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_7D:@   ADC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_7E:@   ROR $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opROR
	fetch 7
@---------------------------------------------------------------------------------
_81:@   STA ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opSTORE m6502_a
	fetch 6
@---------------------------------------------------------------------------------
_84:@   STY $nn
@---------------------------------------------------------------------------------
	doZ
	opSTORE m6502_y
	fetch 3
@---------------------------------------------------------------------------------
_85:@   STA $nn
@---------------------------------------------------------------------------------
	doZ
	opSTORE m6502_a
	fetch 3
@---------------------------------------------------------------------------------
_86:@   STX $nn
@---------------------------------------------------------------------------------
	doZ
	opSTORE m6502_x
	fetch 3
@---------------------------------------------------------------------------------
_88:@   DEY
@---------------------------------------------------------------------------------
	sub m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_8A:@   TXA
@---------------------------------------------------------------------------------
	mov m6502_a,m6502_x
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_8C:@   STY $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSTORE m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_8D:@   STA $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSTORE m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_8E:@   STX $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSTORE m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_90:@   BCC *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_C			@Test Carry
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	@	subeq cycles,cycles,#3*CYCLE
	subeq cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_91:@   STA ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opSTORE m6502_a
	fetch 6
@---------------------------------------------------------------------------------
_94:@   STY $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_95:@   STA $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_96:@   STX $nn,Y
@---------------------------------------------------------------------------------
	doZIYf
	opSTORE m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_98:@   TYA
@---------------------------------------------------------------------------------
	mov m6502_a,m6502_y
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_99:@   STA $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opSTORE m6502_a
	fetch 5
@---------------------------------------------------------------------------------
_9A:@   TXS
@---------------------------------------------------------------------------------
	mov r0,m6502_x,lsr#24
	strb_ r0,m6502_s
	fetch 2
@---------------------------------------------------------------------------------
_9D:@   STA $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opSTORE m6502_a
	fetch 5
@---------------------------------------------------------------------------------
_A0:@   LDY #$nn
@---------------------------------------------------------------------------------
	doIMM
	opLOAD m6502_y
	fetch 2
@---------------------------------------------------------------------------------
_A1:@   LDA ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opLOAD m6502_a
	fetch 6
@---------------------------------------------------------------------------------
_A2:@   LDX #$nn
@---------------------------------------------------------------------------------
	doIMM
	opLOAD m6502_x
	fetch 2
@---------------------------------------------------------------------------------
_A4:@   LDY $nn
@---------------------------------------------------------------------------------
	doZ
	opLOAD m6502_y
	fetch 3
@---------------------------------------------------------------------------------
_A5:@   LDA $nn
@---------------------------------------------------------------------------------
	doZ
	opLOAD m6502_a
	fetch 3
@---------------------------------------------------------------------------------
_A6:@   LDX $nn
@---------------------------------------------------------------------------------
	doZ
	opLOAD m6502_x
	fetch 3
@---------------------------------------------------------------------------------
_A8:@   TAY
@---------------------------------------------------------------------------------
	mov m6502_y,m6502_a
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_A9:@   LDA #$nn
@---------------------------------------------------------------------------------
	doIMM
	opLOAD m6502_a
	fetch 2
@---------------------------------------------------------------------------------
_AA:@   TAX
@---------------------------------------------------------------------------------
	mov m6502_x,m6502_a
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_AC:@   LDY $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLOAD m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_AD:@   LDA $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_AE:@   LDX $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLOAD m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_B0:@   BCS *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_C			@Test Carry
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
@	subne cycles,cycles,#3*CYCLE
	subne cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_B1:@   LDA ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opLOAD m6502_a
	fetch 5
@---------------------------------------------------------------------------------
_B4:@   LDY $nn,X
@---------------------------------------------------------------------------------
	doZIX
	opLOAD m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_B5:@   LDA $nn,X
@---------------------------------------------------------------------------------
	doZIX
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_B6:@   LDX $nn,Y
@---------------------------------------------------------------------------------
	doZIY
	opLOAD m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_B8:@   CLV
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_V
	fetch 2
@---------------------------------------------------------------------------------
_B9:@   LDA $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_BA:@   TSX
@---------------------------------------------------------------------------------
	ldrb_ m6502_x,m6502_s
	mov m6502_x,m6502_x,lsl#24
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_BC:@   LDY $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opLOAD m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_BD:@   LDA $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_BE:@   LDX $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opLOAD m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_C0:@   CPY #$nn
@---------------------------------------------------------------------------------
	doIMM
	opCOMP m6502_y
	fetch_c 2
@---------------------------------------------------------------------------------
_C1:@   CMP ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opCOMP m6502_a
	fetch_c 6
@---------------------------------------------------------------------------------
_C4:@   CPY $nn
@---------------------------------------------------------------------------------
	doZ
	opCOMP m6502_y
	fetch_c 3
@---------------------------------------------------------------------------------
_C5:@   CMP $nn
@---------------------------------------------------------------------------------
	doZ
	opCOMP m6502_a
	fetch_c 3
@---------------------------------------------------------------------------------
_C6:@   DEC $nn
@---------------------------------------------------------------------------------
	doZ
	opDEC
	fetch 5
@---------------------------------------------------------------------------------
_C8:@   INY
@---------------------------------------------------------------------------------
	add m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_C9:@   CMP #$nn
@---------------------------------------------------------------------------------
	doIMM
	opCOMP m6502_a
	fetch_c 2
@---------------------------------------------------------------------------------
_CA:@   DEX
@---------------------------------------------------------------------------------
	sub m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_CC:@   CPY $nnnn
@---------------------------------------------------------------------------------
	doABS
	opCOMP m6502_y
	fetch_c 4
@---------------------------------------------------------------------------------
_CD:@   CMP $nnnn
@---------------------------------------------------------------------------------
	doABS
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_CE:@   DEC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opDEC
	fetch 6
@---------------------------------------------------------------------------------
_D0:@   BNE *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0xff
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	@	subne cycles,cycles,#3*CYCLE
	subne cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_D1:@   CMP ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opCOMP m6502_a
	fetch_c 5
@---------------------------------------------------------------------------------
_D5:@   CMP $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_D6:@   DEC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opDEC
	fetch 6
@---------------------------------------------------------------------------------
_D8:@   CLD
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_D
	fetch 2
@---------------------------------------------------------------------------------
_D9:@   CMP $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_DD:@   CMP $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_DE:@   DEC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opDEC
	fetch 7
@---------------------------------------------------------------------------------
_E0:@   CPX #$nn
@---------------------------------------------------------------------------------
	doIMM
	opCOMP m6502_x
	fetch_c 2
@---------------------------------------------------------------------------------
_E1:@   SBC ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opSBC
	fetch_c 6
@---------------------------------------------------------------------------------
_E4:@   CPX $nn
@---------------------------------------------------------------------------------
	doZ
	opCOMP m6502_x
	fetch_c 3
@---------------------------------------------------------------------------------
_E5:@   SBC $nn
@---------------------------------------------------------------------------------
	doZ
	opSBC
	fetch_c 3
@---------------------------------------------------------------------------------
_E6:@   INC $nn
@---------------------------------------------------------------------------------
	doZ
	opINC
	fetch 5
@---------------------------------------------------------------------------------
_E8:@   INX
@---------------------------------------------------------------------------------
	add m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_E9:@   SBC #$nn
@---------------------------------------------------------------------------------
	doIMM
	opSBC
	fetch_c 2
@---------------------------------------------------------------------------------
_EA:@   NOP
@---------------------------------------------------------------------------------
	fetch 2
@---------------------------------------------------------------------------------
_EC:@   CPX $nnnn
@---------------------------------------------------------------------------------
	doABS
	opCOMP m6502_x
	fetch_c 4
@---------------------------------------------------------------------------------
_ED:@   SBC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_EE:@   INC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opINC
	fetch 6
@---------------------------------------------------------------------------------
_F0:@   BEQ *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0xff
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	@	subeq cycles,cycles,#3*CYCLE
	subeq cycles,cycles,#256
	fetch 2
@---------------------------------------------------------------------------------
_F1:@   SBC ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opSBC
	fetch_c 5
@---------------------------------------------------------------------------------
_F5:@   SBC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_F6:@   INC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opINC
	fetch 6
@---------------------------------------------------------------------------------
_F8:@   SED
@---------------------------------------------------------------------------------
	orr cycles,cycles,#CYC_D
	fetch 2
@---------------------------------------------------------------------------------
_F9:@   SBC $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_FD:@   SBC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_FE:@   INC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opINC
	fetch 7
@***********************************************************����ָ����һЩHACK��Ϸ��Ҫ******************
_FF:@  ISB $????,X  �ӵģ���ȷ����ȷ    �������ߴ�2�޵�HACK��Ҫ
@-------------------------------------------------------------------
	doAIX		@MR_AX()@
	opSBC	    @ISB()@ 
                @MW_EA()@  #define	MW_EA()		WR6502(EA,DT)  // EA .... EFFECTIVE ADDRESS
	fetch 5	    @ADD_CYCLE(5)@                                  // DT .... DATA
@------------------------------------------------------------------------
_FB:@  ISB $????,X  �ӵģ���ȷ����ȷ    �������ߴ�2�޵�HACK��Ҫ
@-------------------------------------------------------------------
	doAIY		@MR_AY()@
	opSBC	    @ISB()@ 
                @MW_EA()@  
	fetch 5	    @ADD_CYCLE(5)@                                  
@------------------------------------------------------------------------
_14:@      �ӵģ���ȷ����ȷ          �������ߴ�2�޵�HACK��Ҫ
@-------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1  @R.PC++@
	fetch 4	                  @ADD_CYCLE(4)@                           
@-------------------------------------------------------------------
_67:@ // RRA $??                 �۹�ս���޵�HACK��Ҫ
@-------------------------------------------------------------------
	doZ			    @MR_ZP()@ 
	opADC           @RRA()@ 
					@MW_ZP()@
	fetch 5 	    @ADD_CYCLE(5)@				
@--------------------------------------------------------------------
_03:@ // SLO ($??,X)              �۹�ս���޵�HACK��Ҫ
@-------------------------------------------------------------------
	doIIX		@MR_IX()@ 
				@SLO()@ 
				@MW_EA()@
	fetch 8@	@ADD_CYCLE(8)@
@-----------------------------------------------------------------
_07:@ // SLO $??
@------------------------------------------------------------------
	doZ		    @MR_ZP()@ 
				@SLO()@ 
				@MW_ZP()@
	fetch 5		@ADD_CYCLE(5)@

@----------------------------------------------------------------------------
	.global debug_6502  @main.c
_xx:@	???					@invalid opcode	��Ч�Ĳ�����
@----------------------------------------------------------------------------
	mov r1,#1           @����debug����ֱ��ע��������
    bl debug_6502
	
	fetch 2

@***************************************************************************************************

@  AREA rom_code, CODE, READONLY
@ @	THUMB
@    PRESERVE8 
.section rom_code,"ax"
	
@----------------------------------------------------------------------------
cpu6502_init:@ PROC
@----------------------------------------------------------------------------
	stmfd sp!,{r4-r11,lr}
		
    ldr r10,=cpu_data	@��ȡ��ַ
	ldr r11,=NES_RAM	@r11=cpu_zpage
	
        ldr r11,[r11]       @NES_RAM����ָ�� 
@*******************************************************		
		str_ r11,memmap_tbl             @NES_RAM����ָ��
		str_ r11,memmap_tbl+4
		str_ r11,memmap_tbl+8
  
		ldr r0,=NES_SRAM              @NES_SRAM����ָ��
		ldr r0,[r0]
		str_ r0,memmap_tbl+12
@**********************************************************************			

	ldr r0,=romfile		 
	ldr r0,[r0]			 @R0����ָ��ROMӳ�񣨰���ͷ��
	add r3,r0,#16		@r3����ָ��rom����(������ͷ��
	str_ r3,rombase		@����rom����ַ
						@r3=rombase til end of loadcart so DON'T FUCK IT UP
	mov r2,#1
	ldrb r1,[r3,#-12]	@ 16kB PROM����Ŀ  	 2
	rsb r0,r2,r1,lsl#14	 @romsize=X*16KB	 <<14 �������ָ��	 r0=0x7fff
	str_ r0,rommask		@rommask=promsize-1	 32768-1	
@------------------------------------------------------------------------------------	
	mov r9,#0		@(�����κ�encodePC��ӳ����*��ʼ�������еĴ���)
	str_ r9,lastbank		@6502PC�� ROM�����ƫ����д0

	mov r0,#0			@Ĭ��romӳ��
	bl map89AB_			@89AB=1st 16k
	mov r0,#-1
	bl mapCDEF_			@CDEF=last 16k
		
@------------------------------------------------------------------------------
    ldrb r1,[r3,#-10]		@get mapper#
	ldrb r2,[r3,#-9]
	tst r2,#0x0e			@long live DiskDude!
	and r1,r1,#0xf0
	and r2,r2,#0xf0
	orr r0,r2,r1,lsr#4
	movne r0,r1,lsr#4		@ignore high nibble if header looks bad	���Ը���λ�����ͷ�����������
                            @r0=mapper��
@--------------------------------------------------------------------------------	
		
	ldr r0,=Mapper_W           @���洦��mapper�ĺ�����ַ
	str_ r0,writemem_tbl+16
	str_ r0,writemem_tbl+20
	str_ r0,writemem_tbl+24
	str_ r0,writemem_tbl+28

@-------------------------------------------------------------------------------
	bl CPU_reset		@reset everything else
	ldmfd sp!,{r4-r11,lr}
	bx lr
	@ ENDP

@----------------------------------------------------------------------------
map67_0:	@mapper3 r0=page# @6502.s����˹������Ҫ
@----------------------------------------------------------------------------
	ldr r10,=cpu_data	@��ȡ��ַ
	mov r9,#0		@(�����κ�encodePC��ӳ����*��ʼ�������еĴ���)
	str_ r9,lastbank		@6502PC�� ROM�����ƫ����д0
map67_:	
	ldr_ r1,rommask
	and r0,r1,r0,lsl#13
	ldr_ r1,rombase
	add r0,r1,r0
	sub r0,r0,#0x6000
	str_ r0,memmap_tbl+12
	b flush
@----------------------------------------------------------------------------
map89_:	@rom paging.. r0=page# ROM��ҳ
@----------------------------------------------------------------------------
	ldr_ r1,rombase			 @rom��ʼ��ַ
	sub r1,r1,#0x8000
	ldr_ r2,rommask
	and r0,r2,r0,lsl#13
	add r0,r1,r0
	str_ r0,memmap_tbl+16
	b flush
@----------------------------------------------------------------------------
mapAB_:
@----------------------------------------------------------------------------
	ldr_ r1,rombase
	sub r1,r1,#0xa000
	ldr_ r2,rommask
	and r0,r2,r0,lsl#13
	add r0,r1,r0
	str_ r0,memmap_tbl+20
	b flush
@----------------------------------------------------------------------------
mapCD_:
@----------------------------------------------------------------------------
	ldr_ r1,rombase
	sub r1,r1,#0xc000
	ldr_ r2,rommask
	and r0,r2,r0,lsl#13
	add r0,r1,r0
	str_ r0,memmap_tbl+24
	b flush
@----------------------------------------------------------------------------
mapEF_:
@----------------------------------------------------------------------------
	ldr_ r1,rombase
	sub r1,r1,#0xe000
	ldr_ r2,rommask
	and r0,r2,r0,lsl#13
	add r0,r1,r0
	str_ r0,memmap_tbl+28
	b flush
@----------------------------------------------------------------------------
map89AB_:
@----------------------------------------------------------------------------
	ldr_ r1,rombase		   @rom����ַ��������ͷ��
	sub r1,r1,#0x8000
	ldr_ r2,rommask
	and r0,r2,r0,lsl#14
	add r0,r1,r0
	str_ r0,memmap_tbl+16
	str_ r0,memmap_tbl+20
flush:		@update m6502_pc & lastbank
	ldr_ r1,lastbank
	sub r9,r9,r1
	and r1,r9,#0xE000	   @//r9��0xe000��λ������
	adr_ r2,memmap_tbl		   @//�Ѵ洢��ӳ���ַ���ص�r2 //thinpv
	lsr r1,r1,#11				@//>>11λ	  r1/2048
	ldr r0,[r2,r1]				@//��ȡr2��ַ+r1ƫ�Ƶ����ݵ�r0

	str_ r0,lastbank				@//����6502PC�� ROM�����ƫ���� 
	add r9,r9,r0	@//m6502_pc+r0
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr

@----------------------------------------------------------------------------
mapCDEF_:
@----------------------------------------------------------------------------
	ldr_ r1,rombase
	sub r1,r1,#0xc000
	ldr_ r2,rommask
	and r0,r2,r0,lsl#14
	add r0,r1,r0
	str_ r0,memmap_tbl+24
	str_ r0,memmap_tbl+28
	b flush
@----------------------------------------------------------------------------
map89ABCDEF_:           @mapper9
@----------------------------------------------------------------------------
	ldr r10,=cpu_data	@��ȡ��ַ
	mov r9,#0		@(�����κ�encodePC��ӳ����*��ʼ�������еĴ���)
	str_ r9,lastbank		@6502PC�� ROM�����ƫ����д0
	
	ldr_ r1,rombase
	sub r1,r1,#0x8000
	ldr_ r2,rommask
	and r0,r2,r0,lsl#15
	add r0,r1,r0
	str_ r0,memmap_tbl+16
	str_ r0,memmap_tbl+20
	str_ r0,memmap_tbl+24
	str_ r0,memmap_tbl+28
	b flush
	
@*************************************************************************************
     .global asm_Mapper_Write@
Mapper_W:	
@-------------------------------------------
	stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ
	mov r1,r12
	bl asm_Mapper_Write
	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
	nop
@---------------------------------------------------------------------------------------

@*****************************************************************************************************

	@ AREA cpu_run, CODE, READONLY
.section cpu_run,"ax"
run6502:@	PROC@r0=Ҫ���е�cpu����*256
@----------------------------------------------------------------------------
	
	stmfd sp!,{r4-r11,lr}		@���⼸���Ĵ����е�ֵ���浽��ջ��
	
	ldr globalptr,=cpu_data	 @r10   wram_globals: ��ȡ��ַ
	ldr cpu_zpage,=NES_RAM			   	@r11
	ldr cpu_zpage,[cpu_zpage]       @NES_RAM����ָ��
 
	adr_ r1,cpuregs @//thinpv
	ldmia r1,{m6502_nz-m6502_pc}	@restore 6502 state�ָ�6502״̬	 r3-r9	
	add cycles,cycles,r0	
			
	ldrb_ r0,cpuirqf @cpu�жϱ�־
	cmp r0,#0x01@
	beq CheckI      @EQ       ���(=al)	irq6502@

	fetch 0       @//��ȡ�����벢����							   
exit_run:

	ldrb_ r0,cpunmif @cpu�жϱ�־
	cmp r0,#0x01@
	beq NMI6502      @EQ       ���(=al)	
	
exit_nmi:	
	adr_ r0,cpuregs @//thinpv
	stmia r0,{m6502_nz-m6502_pc} @����6502״̬	  r3-r9
	
	ldmfd sp!,{r4-r11,pc}	@exit 					
    @ ENDP
@***************************************************************************************
NMI6502:@ PROC@---------------------------
	mov r0,#0
	str_ r0,cpunmif@���cpu�жϱ�־   

	ldr r12,=NMI_VECTOR		 @NMI?	 addy
	bl Vec6502
	sub cycles,cycles,#7*256	@CYCLE=256	 6502���ж�Ǳ����Ϊ�� (7) ����
                              @ ��@ ��Ҳ����˵��Ҫ��Ҫ�� (7) ��������������Ƴ�һ���ж�
	b exit_nmi		@retu.req 
	@ ENDP
@----------------------------------------------------------------------------

default_scanlinehook:
   
	fetch 0
@----------------------------------------------------------
CheckI:								@Check Interrupt Disable ����жϽ���
@----------------------------------------------------------
	tst cycles,#CYC_I
	bne default_scanlinehook		@we dont want no stinkin irqs ���ǲ���Ҫû�������IRQ
@----------------------------------------------------------
irq6502:  
@----------------------------------------------------------
	mov r0,#0
	str_ r0,cpuirqf@���cpu�жϱ�־
	
	ldr r12,=IRQ_VECTOR
	bl Vec6502
	fetch 7    
@----------------------------------------------------------
Vec6502:
@----------------------------------------------------------
	ldr_ r0,lastbank
	sub r0,m6502_pc,r0
	push16					@save PC

	encodeP (R)				@save P
VecCont:
	push8 r0

	orr cycles,cycles,#CYC_I	@disable IRQ	����IRQ

	ldr_ r0,memmap_tbl+28	  @7*4
@	ldrb m6502_pc,[r0,r12]!
	ldrb m6502_pc,[r0,r12]	@�����ݴ���֮ǰ,��ƫ�����ӵ�.req ��,������Ϊ�������ݵĴ洢��ַ
                            @��ʹ�ú�׺"!",����д�ص�.req��
	add r0,r0,r12			 @R12=0xfffc @// ��λ�ж�������ַ
	
	ldrb r2,[r0,#1]
	orr m6502_pc,m6502_pc,r2,lsl#8
	encodePC				@get IRQ vector�õ�6502 PC ROM��ƫ����

	bx lr					  @ ��������
@----------------------------------------------------------------------------
CPU_reset:@ PROC	@called by loadcart (r0-r9 are free to use)
@----------------------------------------------------------------------------
	str lr,[sp,#-4]!	
	
	mov m6502_a,#0
	mov m6502_x,#0
	mov m6502_y,#0
	mov m6502_nz,#0
	adr_ m6502_rmem,readmem_tbl @��readmem_tbl�ĵ�ַ���ص�m6502_rmem //thinpv
	
@	ldr r0,=NES_RAM+0x100	   @256	
		  ldr r0,=NES_RAM            @NES_RAM����ָ��
		  ldr r0,[r0]                @
		  add r0,#0x100
  
	str_ r0,m6502_s		@S=0xFD (0x100-3)	  ��һ���Ĵ������ִ洢���洢����
@-------------------------------------------------------	
	mov r0,#0
	str_ r0,cpunmif  @���cpu�жϱ�־
	str_ r0,cpuirqf  @���cpu�жϱ�־
@------------------------------------------	
	mov cycles,#0		@D=0, C=0, V=0, I=1 disable IRQ.

	ldr r12,=RES_VECTOR		 @// ��λ�ж�������ַ
	bl Vec6502

	adr_ r0,cpuregs			 @��ȡ��ַ //thinpv
	stmia r0,{m6502_nz-m6502_pc}	   @����6502״̬

	ldr r1,=exit_run				  @
	str_ r1,nexttimeout		  @����ָ��ִ�������һ����PC��ַ

	ldr pc,[sp],#4
	@ ENDP
@	nop
@-------------------------------------------------------------------------

  @  AREA rwram_code, CODE, READONLY@READWRITE**************************************
.section rwram_code,"ax"
@----------------------------------------------------------------------------
@memory
@------------------------------------------------------------------------
empty_R:		@����ַ����ȷread bad address (error)
@----------------------------------------------------------------------------	
	mov r0,r12
	mov r1,#2
    bl debug_6502
	@----------------------------------
	mov r0,#0
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr  
@----------------------------------------------------------------------------
void:@ PROC@- - - - - - - - -�պ���
	mov r0,#0	
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
	@ ENDP
@----------------------------------------------------------------------------
ram_R:	@ram read ($0000-$1FFF)
@----------------------------------------------------------------------------
	bic addy,addy,#0x1f800		@only 0x07FF is RAM
	ldrb r0,[cpu_zpage,addy]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
ram_W:	@ram write ($0000-$1FFF)
@----------------------------------------------------------------------------
	bic addy,addy,#0x1f800		@only 0x07FF is RAM
	strb r0,[cpu_zpage,addy]   @ cpu_zpage	.req r11 @=CPU_RAM
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
sram_R:	@sram read ($6000-$7FFF)
@----------------------------------------------------------------------------
	sub r1,addy,#0x6000	
    ldr_ r2,memmap_tbl+12 
@	ldrb r0,[cpu_zpage,r1]
	ldrb r0,[r2,r1]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
sram_W:	@sram write ($6000-$7FFF)
@----------------------------------------------------------------------------
	sub addy,addy,#0x6000
    ldr_ r1,memmap_tbl+12                     
@	strb r0,[cpu_zpage,addy]
	strb r0,[r1,addy]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
rom_R60:	@rom read ($6000-$7FFF)
@----------------------------------------------------------------------------
	ldr_ r1,memmap_tbl+12
	ldrb r0,[r1,addy]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
rom_R80:	@rom read ($8000-$9FFF)
@----------------------------------------------------------------------------
	ldr_ r1,memmap_tbl+16
	ldrb r0,[r1,addy]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
rom_RA0:	@rom read ($A000-$BFFF)
@----------------------------------------------------------------------------
	ldr_ r1,memmap_tbl+20
	ldrb r0,[r1,addy]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
rom_RC0:	@rom read ($C000-$DFFF)
@----------------------------------------------------------------------------
	ldr_ r1,memmap_tbl+24
	ldrb r0,[r1,addy]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
rom_RE0:	@rom read ($E000-$FFFF)
@----------------------------------------------------------------------------
	ldr_ r1,memmap_tbl+28
	ldrb r0,[r1,addy]
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr

	nop
@----------------------------------------------------------------------------
@IO
  @  AREA io_code, CODE, READONLY @--
.section io_code,"ax"
@----------------------------------------------------------------------------

@----------------------------------------------------------------------------
IO_R:		@I/O read
@----------------------------------------------------------------------------
	mov r2,#0x4000      @$4018-$6000
	add r2,#0x18
	cmp r12,r2    	
	bhi  Read_Low              @HI  �޷���������  C==1 && Z==0 
		
	sub r1,r12,#0x4000	 @addy=r12
	subs r1,r1,#0x15
	bmi empty_R		  @����ַ����ȷ MI       ����(MInus)                   N==1 
	cmp r1,#3
@	ldrmi pc,[pc,r2,lsl#2]
	ldr r2,=io_read_tbl   @//�Ĺ�����3��
	add r2,r2,r1,lsl#2			  @<<2
	ldrmi pc,[r2]
	b empty_R          @����ַ����ȷ
@	nop
	
io_read_tbl:
	.word apu_4015R@void@_4015r	@4015 (sound)
	.word joy0_R	@4016: controller 1
	.word joy1_R	@4017: controller 2
@----------------------------------------------------------------------------
IO_W:		@I/O write
@----------------------------------------------------------------------------
	mov r2,#0x4000      @$4018-$6000
	add r2,#0x18
	cmp r12,r2    	
	bhi  Write_Low              @HI  �޷���������  C==1 && Z==0 
	
	sub r1,r12,#0x4000	   @addy=r12
	cmp r1,#0x18
@	ldrmi pc,[pc,r2,lsl#2]
	ldr r2,=io_write_tbl   @//�Ĺ�����3��
	add r2,r2,r1,lsl#2			  @<<2		
	ldrmi pc,[r2]          @//ֱ�Ӳ���pc̫����Σ����
	b empty_R		  @����ַ����ȷ
 	nop
	
io_write_tbl:	
	.word apu_w@void@_4000w
	.word apu_w@_4001w
	.word apu_w@_4002w
	.word apu_w@_4003w
	.word apu_w@_4004w
	.word apu_w@_4005w
	.word apu_w@_4006w
	.word apu_w@_4007w
	.word apu_w@_4008w
	.word apu_w@void@
	.word apu_w@_400aw
	.word apu_w@void@_400bw
	.word apu_w@void@_400cw
	.word apu_w@void
	.word apu_w@void@_400ew
	.word apu_w@void@_400fw
	.word apu_w@void@_4010w
	.word apu_w@void@_4011w
	.word apu_w@void@_4012w
	.word apu_w@void@_4013w
	.word dma_W	@$4014: Sprite DMA transfer
	.word apu_4015w@void@_4015w		 @ ����ͨ���л� 

	.word joy0_W	@$4016: Joypad 0 write@joypad_write_ptr
	.word apu_4017w@void@$4017: ?
		
@-------------------------------------------------------------------------------
    .global asm_Mapper_ReadLow
Read_Low:@  PROC@$5000-$6000  mapper->MemoryReadLow(addr)@	
@------------------------------------------------------------------------------
    stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ 
	mov r0,r12
	bl asm_Mapper_ReadLow

	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
	@ ENDP
@-------------------------------------------------------------------------------
    .global asm_Mapper_WriteLow
Write_Low:@  PROC@$5000-$6000  mapper->MemoryWriteLow( data, addr)@	
@------------------------------------------------------------------------------
    stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ 
	mov r1,r12
	bl asm_Mapper_WriteLow

	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
	@ ENDP
@-----------------------------------------------------------------------------
	.global Apu_Write  @apu.c 
	.global Apu_Write4015  @apu.c	
@-----------------------------------------------------------------------------------
apu_w:					@ 0x4000--0x4013
@---------------------------------------------------------------------------------
    stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ 
	bl Apu_Write

	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@-----------------------------------------------------------------------------------
apu_4015w:
@-------------------------------------------------------------------------
	stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ      
	bl Apu_Write4015
	
	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@-----------------------------------------------------------------------------------
	.global Apu_Write4017  @apu.c
apu_4017w:
@-------------------------------------------------------------------------
	stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ      
	bl Apu_Write4017
	
	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
    .global Apu_Read4015  @apu.c
apu_4015R:	@4015
@----------------------------------------------------------------------------------	
	stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ 
	add r0,r1,#0x15
	bl Apu_Read4015
	
	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
dma_W:	@(4014)		sprite DMA transfer	����DMA����	DMA���ʾ���RAM��
@ͨ��дһ��ֵxx������˿ڣ�����CPU�ڴ��ַΪ$xx00��$xxFF�������͵������ڴ� 
@----------------------------------------------------------------------------
	sub cycles,cycles,#512*256
	stmfd sp!,{r3,lr}

	and r1,r0,#0xe0
	adr_ r2,memmap_tbl  @CPU_RAM	//thinpv
	lsr r1,r1,#3       @>>3
	ldr r2,[r2,r1]
	and r0,r0,#0xff
	add r2,r2,r0,lsl#8	@addy  r2=DMA source Դ
	ldr r1,=spr_ram		@r1     DMA�� Ŀ�ĵ�	   ppu.c
		ldr r1,[r1]         @spr_ram����ָ��
		
	mov r0,#64			@256/4
copy_:
	subs r0,r0,#1		  @-1
	ldr r3,[r2,r0,lsl#2]
	str r3,[r1,r0,lsl#2]  @<<2	   *4
	bne copy_              @r0!=0

	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
    bx lr
@----------------------------------------------------------------------------
    .global PADdata0
	.global PADdata1	
joy0_W:		@4016  �ֱ�1��ֵ [7:0]��7 ��6 ��5 ��4 Start3 Select2 B1 A0   )
@----------------------------------------------------------------------------
	tst r0,#1           @0��д��1����
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bxne lr            @NE       ���ȣ�Not=al��  
	
	ldr r1,=PADdata0@   //�ֱ�1��ֵ  
    ldr r1,[r1]
	str_ r1,joy0data
	          	
	ldr r1,=PADdata1@   //�ֱ�1��ֵ  
    ldr r1,[r1]
	str_ r1,joy1data							
				
	bx lr
@----------------------------------------------------------------------------
joy0_R:		@4016
@----------------------------------------------------------------------------	
	ldr_ r0,joy0data	   @��������  ��ǰ��ȡλ@joy0data�Ǽ�ֵ
    mov r1,r0,lsr#1       @>>1
	str_ r1,joy0data
	
	and r0,r0,#1      @&1	
	orr r0,r0,#0x40   @|0x40

    orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@----------------------------------------------------------------------------
joy1_R:		@4017
@----------------------------------------------------------------------------
	ldr_ r0,joy1data	   @��������  ��ǰ��ȡλ@joy0data�Ǽ�ֵ
    mov r1,r0,lsr#1       @>>1
	str_ r1,joy1data
	
	and r0,r0,#1      @&1	
	orr r0,r0,#0x40   
	
    orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@--------------------------------------------------------------
K6502_Read:@	PROC@apu  Rendering DPCM channel #5		r0=APU->ApuC5Address��ȷ����ȷ*
@---------------------------------------------------------------
	   .global  K6502_Read		@switch ( wAddr & 0xe000 ) apu.c
    stmfd sp!,{lr}
	
	mov r1,r0,lsr#13 @>>13=  & 0xe000
	ldr r2,=CPU_RAM@@//�洢��ӳ�� ram+rom	
	ldr r1,[r2,r1,lsl#2]	@lookup rom ptr..����ptr
	
    bic r0,r0,#0xe000 @and r0,#0x1fff &0x1fff	
	ldrb r0,[r1,r0]
	
    ldmfd sp!,{lr}
	bx lr
	@ ENDP
@	nop
@------------------------------------------------------------------------
	@  AREA CPU_GPU, CODE, READONLY
.section .CPU_GPU,"ax"
	  
    .global PPU_WriteToPort    @PPU.c
	.global PPU_ReadFromPort	  @PPU.c
@------------------------------------------------------------------------------------
PPU_W:
	stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ 
	mov r1,r12
	bl PPU_WriteToPort
	ldmfd sp!,{r3,lr}
	orr lr,#0x00		@lr���λ��1��ֹ����arm״̬
	bx lr
@--------------------------------------------------------------------------------------
PPU_R:
	stmfd sp!,{r3,lr}	@LR �Ĵ�����ջ    ��ı�R4 
	mov r0,r12
	bl PPU_ReadFromPort	
	ldmfd sp!,{r3,lr}
    orr lr,#0x00
	bx lr
    nop
@-----------------------------------------------------------------------------------------
	@ AREA cpu_code, DATA, READONLY 
.section cpu_code,"ax"
@-----------------------------------------------------------------------------------------		
op_table:	   @.word ���ڷ���һ�����ڴ浥Ԫ op_table�ڴ����ʼ��ַ���
	.word _00,_01,_xx,_03,_xx,_05,_06,_07,_08,_09,_0A,_xx,_xx,_0D,_0E,_xx
	.word _10,_11,_xx,_xx,_14,_15,_16,_xx,_18,_19,_xx,_xx,_xx,_1D,_1E,_xx
	.word _20,_21,_xx,_xx,_24,_25,_26,_xx,_28,_29,_2A,_xx,_2C,_2D,_2E,_xx
	.word _30,_31,_xx,_xx,_xx,_35,_36,_xx,_38,_39,_xx,_xx,_xx,_3D,_3E,_xx
	.word _40,_41,_xx,_xx,_xx,_45,_46,_xx,_48,_49,_4A,_xx,_4C,_4D,_4E,_xx
	.word _50,_51,_xx,_xx,_xx,_55,_56,_xx,_58,_59,_xx,_xx,_xx,_5D,_5E,_xx
	.word _60,_61,_xx,_xx,_xx,_65,_66,_67,_68,_69,_6A,_xx,_6C,_6D,_6E,_xx
	.word _70,_71,_xx,_xx,_xx,_75,_76,_xx,_78,_79,_xx,_xx,_xx,_7D,_7E,_xx
	.word _xx,_81,_xx,_xx,_84,_85,_86,_xx,_88,_xx,_8A,_xx,_8C,_8D,_8E,_xx
	.word _90,_91,_xx,_xx,_94,_95,_96,_xx,_98,_99,_9A,_xx,_xx,_9D,_xx,_xx
	.word _A0,_A1,_A2,_xx,_A4,_A5,_A6,_xx,_A8,_A9,_AA,_xx,_AC,_AD,_AE,_xx
	.word _B0,_B1,_xx,_xx,_B4,_B5,_B6,_xx,_B8,_B9,_BA,_xx,_BC,_BD,_BE,_xx
	.word _C0,_C1,_xx,_xx,_C4,_C5,_C6,_xx,_C8,_C9,_CA,_xx,_CC,_CD,_CE,_xx
	.word _D0,_D1,_xx,_xx,_xx,_D5,_D6,_xx,_D8,_D9,_xx,_xx,_xx,_DD,_DE,_xx
	.word _E0,_E1,_xx,_xx,_E4,_E5,_E6,_xx,_E8,_E9,_EA,_xx,_EC,_ED,_EE,_xx
	.word _F0,_F1,_xx,_xx,_xx,_F5,_F6,_xx,_F8,_F9,_xx,_FB,_xx,_FD,_FE,_FF
		                                                         
@---------------------------------------------------------------------------------				
	@ AREA wram_globals0, DATA, READWRITE
.section wram_globals0,"aw"
@---------------------------------------------------------------------------------		
cpu_data:        @43*4
	.word op_table        @opz #   4      //�������ַ	
  @readmem_tbl													
	.word ram_R	@$0000				
	.word PPU_R	@$2000
	.word IO_R	@$4000
	.word sram_R	@$6000
	.word rom_R80	@$8000
	.word rom_RA0	@$A000
	.word rom_RC0	@$C000
	.word rom_RE0	@$E000
  @writemem_tbl
	.word ram_W	@$0000			  
	.word PPU_W	@$2000	  r0������
	.word IO_W	@$4000
	.word sram_W	@$6000
	.word void	@$8000
	.word void	@$A000
	.word void	@$C000
	.word void	@$E000
CPU_RAM:   @memmap_tbl		�洢��ӳ��
	.word NES_RAM		@$0000   0000-7fff	 keep $400 byte aligned for 6502 stack shit
	.word NES_RAM		@$2000    shouldӦ��	  ����1024�ֽڶ���
	.word NES_RAM		@$4000     never����û��
	.word NES_SRAM@   NES_RAM-0x5800	@$6000      change�ı�
rommap:	.skip 4*4			@$8000-FFFF	 memmap_tbl+16

cpustate:
	@group these together for save/loadstate
	.skip 7*4 @cpuregs (nz,c,a,x,y,cycles,pc)
	.word 0 @m6502_s:
	.word 0 @lastbank: ���MEMMAP���ӵ�PC �����ڼ��㵱ǰ��PC ��
	.word exit_run @nexttimeout:  jump here when cycles runs out	������һ��ʱ����������
   
    .word 0   @rombase # 4			@//ROM��ʼ��ַ
    .word 0   @romnumber # 4		 @// 
    .word 0   @rommask # 4		   @//ROM��Ĥ	rommask=romsize-1
		
	.word 0   @joy0data # 4	   @//�ֱ�1��������
	.word 0   @joy1data # 4	   @//�ֱ�2��������	
clocks:		
	.word 0	@clocksh # 4    @//ִ�е�ʱ���� apu��
cpunmi:
    .word 0   @cpunmif # 4      @cpu�жϱ�־
cpuirq:
    .word 0   @cpuirqf # 4      @cpu�жϱ�־ 		
@	DCW 0	DCW����16λ����
@----------------------------------------------------------------------------
@	ALIGN           @ͨ��������ָ��NOP��䣬��ʹ��ǰλ����һ��ָ���ı߽����
	@ END


