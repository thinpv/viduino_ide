name=Viduino
version=0.0.1

# arch
arch=arm926
arch_for_c_cpp=arm926

# Compile variables
compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.cpp.cmd=arm-none-eabi-g++
compiler.ld.cmd=arm-none-eabi-ld
compiler.ar.cmd=arm-none-eabi-ar
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.size.cmd=arm-none-eabi-size

compiler.cores.path={runtime.platform.path}/cores/allwinner
compiler.sdk.path={runtime.platform.path}/tools/sdk
compiler.driver.path={compiler.sdk.path}/driver
compiler.util.path={compiler.sdk.path}/util
compiler.os.path={compiler.sdk.path}/{OS}
compiler.boot.path={compiler.os.path}/boot

NON_OS.flags = "-I{compiler.sdk.path}/{OS}/freertos/include"
FREERTOS_OS.flags = "-I{compiler.sdk.path}/{OS}/freertos/include"
compiler.preproc.flags= {{OS}.flags} "-I{compiler.cores.path}/api" "-I{compiler.driver.path}" "-I{compiler.boot.path}" "-I{compiler.boot.path}/f1c100s" "-I{compiler.util.path}" "-I{build.path}/sketch" "-I{build.path}/sketch/inc"

compiler.both.flags= -g -ggdb -Wall -O3 -D__ARM32_ARCH__=5 -D__ARM926EJS__ -D__ARM32__ -DARM -D{OS} -Wno-unused-variable -Wno-multichar -ffunction-sections -fdata-sections -ffreestanding

compiler.debug.flags=
#-DCONFIG_LOG_ENABLE -DCONFIG_LOG_LEVEL=LOG_INFO -DDEBUG=1

compiler.mc.flags= -march=armv5te -mtune=arm926ej-s -mfloat-abi=soft -marm -mno-thumb-interwork

compiler.S.flags= -x assembler-with-cpp -std=gnu11 {compiler.mc.flags} {compiler.debug.flags} {compiler.both.flags} {compiler.preproc.flags}

compiler.c.flags=-std=gnu11 {compiler.mc.flags} {compiler.debug.flags} {compiler.both.flags} {compiler.preproc.flags} -Wno-implicit-int

compiler.cpp.flags=-std=gnu++11 {compiler.mc.flags} {compiler.debug.flags} {compiler.both.flags} {compiler.preproc.flags} -fno-rtti -fno-use-cxa-atexit -fno-threadsafe-statics -fno-exceptions

compiler.ld.flags= -T {build.ldscript} -nostdlib -Wl,-gc-sections -ffunction-sections -fdata-sections

compiler.ar.flags=rcs

compiler.objcopy.eep.flags=

compiler.elf2hex.flags=-R .rel.dyn

compiler.define=-DARDUINO=100

compiler.c.extra_flags=-DF_CPU={build.f_cpu} -D{build.board} -D{arch_for_c_cpp} -DARCH={arch_for_c_cpp}
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=-DF_CPU={build.f_cpu} -D{build.board} -D{arch_for_c_cpp} -DARCH={arch_for_c_cpp}
compiler.S.extra_flags=-DF_CPU={build.f_cpu} -D{build.board}
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# Can be overridden in boards.txt
build.extra_flags=

# USB Flags
# ---------
build.usb_flags=
build.openocdcfg=

# Compile patterns
# ---------------------

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -c -o "{object_file}"

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -c -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -c -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Link gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.ld.flags} {build.extra_flags} -Wl,--cref,-Map={build.path}/{build.project_name}.elf.map {object_files} "{archive_file_path}" -o "{build.path}/{build.project_name}.elf" "{compiler.os.path}/lib/libsdk.a" "{compiler.sdk.path}/lib/libdriver.a" "{compiler.os.path}/lib/libsdk.a" -lgcc -lm -lc -lnosys

## Create binary
recipe.objcopy.eep.1.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.eep.flags} -v --output-format=binary "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"
recipe.objcopy.eep.2.pattern={runtime.tools.python3.path}/python3 "{runtime.platform.path}/tools/lzmatool.py" "{build.path}/{build.project_name}.bin" "{build.path}/{build.project_name}.lzma"

## Create hex
recipe.objcopy.hex.pattern=
#"{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} -O srec "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern={runtime.tools.python3.path}/python3 "{runtime.platform.path}/tools/getsizetool.py" "{build.path}/{build.project_name}.{Compress}"
recipe.size.regex=\s*[0-9]+\s+[0-9]+\s+[0-9]+\s+([0-9]+).*

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

# Uploader tools
# -------------------

tools.flashtool.path=
# Because the variable expansion doesn't allow one tool to find another, the following lines
# will point to "{runtime.platform.path}/tools/python3/python3" in GIT and
# "{runtime.tools.python3.path}/python3" for JSON board manager releases.
tools.flashtool.cmd={runtime.tools.python3.path}/python3
tools.flashtool.network_cmd={runtime.tools.python3.path}/python3

tools.flashtool.upload.protocol=
# flashtool.py --trace option is a debug option, not a verbose option
tools.flashtool.upload.params.verbose=
tools.flashtool.upload.params.quiet=

# First, potentially perform an erase or nothing
# Next, do the binary upload
# Combined in one rule because Arduino doesn't suport upload.1.pattern/upload.3.pattern
tools.flashtool.upload.pattern="{cmd}" "{runtime.platform.path}/tools/upload.py" --port "{serial.port}" --baud "{upload.speed}" write_flash 0x80000 "{build.path}/{build.project_name}.{Compress}"
